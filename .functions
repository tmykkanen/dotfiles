#!/usr/bin/env bash

# tmp function for testing
function tmp() {
  echo "Edit in .functions file to test bash functions."
}

# Script for finding pdfs missing OCR data
# from https://robservatory.com/find-and-fix-non-searchable-pdfs/
function missingOCR() {
  saveIFS=$IFS
  IFS=$(echo -en "\n\b")

  FilesToCheck=$(find `pwd` -maxdepth 99 -name "*.pdf")

  for i in $FilesToCheck
    do
       errCheck=$(pdffonts ${i} 2>&1 | tail -1)
       if [[ $errCheck =~ ^- ]]
       then
           printf $i"\n"
       fi
     done

     IFS=$saveIFS
}

# File Naming Function
  #TODO: RENAME FUNCTION
  #TODO: Add error checking using $# to check for valid input at $1 and at least two args.
function fnm() {
  # Example: rename -vnc -S "-" " " -A `date -r $(stat -f %DB "tMp-File.md") +%Y%m%d_%H%M%S_r2_` "tMp-File.md"
  # Assign $1 to token and shift $@
  token=$1;
  shift;

  # Iterate through $@, processing each filename
  for f in "$@"; do
    # eval "file='${f}'";
    var=`date -r $(stat -f %DB "${f}") +%Y%m%d_%H%M%S_`;
    var+=$token;
    var+="_"
    rename -vc -S "-" " " -A $var "${f}";
  done

}

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Move file enhanced
function mvf() {
  echo mv "$1" "$2/$1";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Use Gitâ€™s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# `a` with no arguments opens the current directory in Atom, otherwise
# opens the given location
function a() {
	if [ $# -eq 0 ]; then
		atom .;
	else
		atom "$@";
	fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# Moves a file to the macOS trash
function trash () { command mv "$@" ~/.Trash ; }

# Converts wav to mp3 using VBR. Requires ffmpeg (https://trac.ffmpeg.org/wiki/Encode/MP3)
function wav2mp3 () {
  ffmpeg -i $1.wav -codec:a libmp3lame -qscale:a 2 $1.mp3
}

# [Bash_Profile Refresh] Executes bootstrap.sh to refresh bash files with most recent versions.
function bpr () {
  dir=$PWD;
  set -- -f;
  source ~/github/dotfiles/bootstrap.sh;
  cd "$dir";
}
